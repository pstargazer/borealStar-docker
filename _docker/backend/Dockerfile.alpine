ARG PHPVERSION=8.2

# FROM nginx:alpine AS nginx
# FROM php:${PHPVERSION}-fpm-alpine AS php-fpm
# FROM php:8.2-fpm-alpine AS php-fpm
FROM composer:latest AS composer
FROM php:fpm-alpine AS php-fpm

COPY --from=composer /usr/bin/composer /usr/bin/composer

ENV USERNAME process
ENV USERGROUP users

ENV CMD_PATH /app
ENV ENTRY_PREFIX /srv
# ENV CMD_PATH /var/www/html/

# set proccess user
RUN adduser -u 2000 -G users -s /bin/sh -D ${USERNAME}

# prerequesite for php extentions 

RUN apk update && apk upgrade

# tools
RUN apk add lsof


# configure php and ext/
# ADD _docker/backend/conf/php/php.ini-development /usr/local/etc/php/php.ini

ENV PKG_CONFIG_PATH /usr/src/php/ext/

# install libraries
RUN apk add --no-cache \
                    php83-pdo_pgsql \
                    oniguruma-dev \ 
                    # php83 \
                    php-common  \
                    libpq-dev \
                    libcurl curl-dev  \
                    libcrypto3 libssl3  \
                    libzip-dev \
                    libxml2-dev

WORKDIR $PKG_CONFIG_PATH
# req iconv pdo_pgsql curl mbstring openssl zip phar
RUN docker-php-source extract 

# somewhy extentions fails when installed together,so installing one-by-one

RUN docker-php-ext-configure    zip 
RUN docker-php-ext-configure    phar 
RUN docker-php-ext-configure    pcntl 
RUN docker-php-ext-configure    pdo 
RUN docker-php-ext-configure    pgsql 
RUN docker-php-ext-configure    pdo_pgsql 
RUN docker-php-ext-configure    session 
RUN docker-php-ext-configure    dom 
RUN docker-php-ext-configure    fileinfo 
RUN docker-php-ext-configure    xml  
RUN docker-php-ext-configure    xmlwriter


RUN docker-php-ext-install      zip 
RUN docker-php-ext-install      phar  
RUN docker-php-ext-install      pcntl  
RUN docker-php-ext-install      pdo  
RUN docker-php-ext-install      pgsql
RUN docker-php-ext-install      pdo_pgsql
RUN docker-php-ext-install      session
RUN docker-php-ext-install      dom
RUN docker-php-ext-install      fileinfo 
RUN docker-php-ext-install      xml 
RUN docker-php-ext-install      xmlwriter 

RUN docker-php-ext-enable       zip
RUN docker-php-ext-enable       phar
RUN docker-php-ext-enable       pcntl
RUN docker-php-ext-enable       pdo 
RUN docker-php-ext-enable       pgsql
RUN docker-php-ext-enable       pdo_pgsql
RUN docker-php-ext-enable       session
RUN docker-php-ext-enable       dom
RUN docker-php-ext-enable       fileinfo
RUN docker-php-ext-enable       xml
RUN docker-php-ext-enable       xmlwriter

# seems like already exists
# RUN docker-php-ext-configure    tokenizer
# RUN docker-php-ext-install      tokenizer
# RUN docker-php-ext-enable       tokenizer







# RUN docker-php-ext-enable       pdo pdo_pgsql pdo_pgsql zip phar xmlwriter xml fileinfo dom session

# RUN docker-php-source delete
# RUN     apk add --no-cache --virtual .phpize-deps $PHPIZE_DEPS \
    # &&  docker-php-ext-configure    pdo_pgsql zip phar pcntl \
    # && apk del .phpize-deps 
    

# laravel WSS requesite
# RUN docker-php-ext-install pcntl
# RUN docker-php-ext-configure pcntl 

# crond is part of the openrc
RUN apk add openrc \
            busybox \
            nginx \
            ca-certificates \
            --no-cache 


RUN chgrp -R 0 /bin/busybox 

# $(readlink -f ~username/.linuxbrew/node)


# copy crontabs 
ADD ./_docker/backend/conf/periodic-spool/ /etc/crontabs/
ADD ./_docker/backend/conf/periodic-etc/ /etc/periodic/ 
# configure caps for cron
# RUN setcap cap_setgid+ep /usr/sbin/crond
# log directory
RUN mkdir /var/log/server
# RUN chmod -R 777 /var/log
# RUN chown ${USERNAME}:${USERGROUP} /var/log/server -R


# copy conf files in etc root
ADD --chmod=555 ./_docker/backend/conf/etc/ /etc/

# copy code
WORKDIR ${CMD_PATH}
ADD --chown=${USERNAME}:${USERGROUP} --chmod=775 ./backend/ .

# copy nginx
COPY ./_docker/backend/conf/nginx/ /etc/nginx/


# RUN su -c "chmod -R 777 ${CMD_PATH}"
# RUN su -c "chown -R 2000:users ${CMD_PATH}/*"

ADD --chown=${USERNAME}:users --chmod=775 _docker/backend/entrypoint.sh ${ENTRY_PREFIX}/



EXPOSE 8000 85 8080 443

# using root cause crond cannot work without that
# USER ${USERNAME}
ENTRYPOINT /bin/ash $ENTRY_PREFIX/entrypoint.sh
